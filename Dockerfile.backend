# Dockerfile.backend

# Etapa 1: Usar uma imagem base Debian (slim) que tem melhor compatibilidade com as libs do Chrome
FROM node:20-slim

# Instala as dependências de sistema necessárias para o Puppeteer (Chromium)
# Esta é a correção principal para o erro 'Failed to launch the browser process'
RUN apt-get update \
    && apt-get install -y \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libgconf-2-4 \
    libgdk-pixbuf2.0-0 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    lsb-release \
    wget \
    xdg-utils \
    # Boa prática: Limpa o cache do apt para reduzir o tamanho final da imagem
    && rm -rf /var/lib/apt/lists/*

# Define o diretório de trabalho dentro do container
WORKDIR /app

# Copia os arquivos de definição de pacotes primeiro para otimizar o cache do Docker
COPY backend/package*.json ./

# Instala apenas as dependências de produção para uma imagem final mais leve e segura
RUN npm install --only=production

# Copia o restante do código do backend para o diretório de trabalho
COPY backend/ .

# Expõe a porta que a aplicação usa
EXPOSE 8080

# Comando para iniciar a aplicação
CMD ["npm", "start"]